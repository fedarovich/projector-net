# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  BuildConfiguration: 'Release'
  MajorVersion: 0
  MinorVersion: 1

name: '$(MajorVersion).$(MinorVersion).$(rev:r)'

steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: 'Source/ProjectorNet.sln'
    arguments: '-c $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: build    
    projects: 'Source/ProjectorNet.sln'
    arguments: '-c $(BuildConfiguration) -p:FileVersion=$(Build.BuildNumber) -p:InformationalVersion="$(Build.BuildNumber)-$(Build.SourceVersion)"'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: 'Source/ProjectorNet.sln'
    arguments: '-c $(BuildConfiguration) --no-build'
    nobuild: true

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack ProjectorNet'
  inputs:
    command: custom
    custom: pack
    projects: 'Source/ProjectorNet/ProjectorNet.csproj'
    arguments: '-c $(BuildConfiguration) -p:VersionPrefix=$(Build.BuildNumber) --no-build --include-symbols -o "$(Build.ArtifactStagingDirectory)"'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack ProjectorNet.Generator'
  inputs:
    command: custom
    custom: pack
    projects: 'Source/ProjectorNet.Generator/ProjectorNet.Generator.csproj'
    arguments: '-c $(BuildConfiguration) -p:VersionPrefix=$(Build.BuildNumber) --no-build -o "$(Build.ArtifactStagingDirectory)"'

- task: PublishBuildArtifacts@1

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet 6.x'
  inputs:
    versionSpec: 6.x

- task: NuGetCommand@2
  displayName: 'NuGet push'
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: NuGet
    includeSymbols: true
